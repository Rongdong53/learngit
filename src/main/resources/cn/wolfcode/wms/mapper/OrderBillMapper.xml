<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.wms.mapper.OrderBillMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.wms.domain.OrderBill" >
    <id column="id" property="id" />
    <result column="sn" property="sn" />
    <result column="vdate" property="vdate" />
    <result column="status" property="status" />
    <result column="total_amount" property="totalAmount" />
    <result column="total_number" property="totalNumber" />
    <result column="audit_time" property="auditTime" />
    <result column="input_time" property="inputTime" />
    <association property="inputUser" javaType="Employee" columnPrefix="inputUser_">
		<id property="id" column="id" />
    	<result property="name" column="name" />
    </association>
    <association property="auditor" javaType="Employee" columnPrefix="auditor_">
		<id property="id" column="id" />
    	<result property="name" column="name" />
    </association>
	<association property="supplier" javaType="Supplier" columnPrefix="supplier_">
		<id property="id" column="id" />
		<result property="name" column="name" />
	</association>
	<collection property="items" ofType="OrderBillItem" select="cn.wolfcode.wms.mapper.OrderBillItemMapper.selectByBillId" column="id"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from `orderbill`
    where id = #{id}
  </delete>
  <insert id="insert" parameterType="cn.wolfcode.wms.domain.OrderBill" useGeneratedKeys="true" keyProperty="id" >
    insert into `orderbill` (sn, vdate, status, total_amount, total_number, audit_time, 
      input_time, input_user_id, auditor_id, supplier_id)
    values (#{sn}, #{vdate}, #{status}, #{totalAmount}, #{totalNumber}, #{auditTime}, 
      #{inputTime}, #{inputUser.id}, #{auditor.id}, #{supplier.id})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.wms.domain.OrderBill" >
    update `orderbill`
    set sn = #{sn},
      vdate = #{vdate},
      total_amount = #{totalAmount},
      total_number = #{totalNumber},
      supplier_id = #{supplier.id}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    SELECT
		orderbill.id,
		sn,
		vdate,
		supplier.id AS supplier_id,
		supplier.`name` AS supplier_name
	FROM
		`orderbill` orderbill
	JOIN 
		supplier supplier ON orderbill.supplier_id = supplier.id
	WHERE
		orderbill.id = #{id}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, sn, vdate, status, total_amount, total_number, audit_time, input_time, 
    input_user_id, auditor_id, supplier_id
    from `orderbill`
  </select>
  <sql id="baseSql">
  	<where>
  		<if test="beginDate != null">
  			AND orderbill.vdate &gt;= #{beginDate}
  		</if>
  		<if test="endDate != null">
  			AND orderbill.vdate &lt;= #{endDate}
  		</if>
  		<if test="supplierId>0">
  			AND supplier.id = #{supplierId}
  		</if>
  		<if test="status>=0">
  			AND orderbill.status = #{status}
  		</if>
  	</where>
  </sql>
   <select id="queryForCount" resultType="int">
		SELECT COUNT(orderbill.id) FROM orderbill orderbill
		LEFT JOIN supplier supplier ON orderbill.supplier_id = supplier.id
		LEFT JOIN employee inputUser ON orderbill.input_user_id = inputUser.id
		LEFT JOIN employee auditor ON orderbill.auditor_id = auditor.id
		<include refid="baseSql"/>
	</select>
	<select id="queryForList" resultMap="BaseResultMap">
		SELECT
			orderbill.id,
			orderbill.sn,
			orderbill.vdate,
			orderbill.status,
			orderbill.total_amount,
			orderbill.total_number,
			orderbill.audit_time,
			orderbill.input_time,
			inputUser.id AS inputUser_id,
			inputUser.`name` AS inputUser_name,
			auditor.id AS auditor_id,
			auditor.`name` AS auditor_name,
			supplier.id AS supplier_id,
			supplier.`name` AS supplier_name
		FROM
			orderbill orderbill
		LEFT JOIN supplier supplier ON orderbill.supplier_id = supplier.id
		LEFT JOIN employee inputUser ON orderbill.input_user_id = inputUser.id
		LEFT JOIN employee auditor ON orderbill.auditor_id = auditor.id 
   	 <include refid="baseSql"/>
    LIMIT #{start},#{pageSize}
	</select>
	<update id="updateAuditorByPrimaryKey">
		UPDATE orderbill SET status = #{status}, audit_time = #{auditTime},
		auditor_id = #{auditor.id} WHERE id = #{id}
	</update>
</mapper>